			    Folve - Fuse Convolve
	 A fuse filesystem for on-the-fly convolving of audio files.

=== Overview ===

This fuse filesystem takes an original path to a directory with flac-files
and provides these files at the mount point. Accessing audio files will
automatically convolve these on-the-fly using the zita convolver by
Fons Adriaensen. You can directly use filter configuration files that you have
for jconvolver/fconvolver (files in this directory starting with zita-* are
imported from his jconvolver project to parse the same configuration files).
These config files need have a special naming scheme, see below.

Folve solves the problem that many media servers don't provide a convolving
option and their only interface to the outside world is to access a file
system. So here we provide a filesystem, convolving files while they read them :)
In general the beauty of simply accessing audio files that are transparently
convolved is very useful and powerful in other contexts too.

Filesystem accesses are optimized for streaming. If files are read sequentially,
we only need to convolve whatever is requested, which minimizes CPU use if
you don't need the full file. Simply playing a file in real-time will use very
little CPU (on my notebook ~3% on one core). So this should work as well on
low-CPU machines (like NAS servers; haven't tried that yet).

Of course, skipping forward requires to convolve everything up to the point (the
zita convolver is pretty fast though, so you'll hardly notice).

While indexing, some media servers try to skip to the end of the file (don't
know why, to check if the end is there ?), so there is code that detects this
case so that we don't end up convolving whole files just for this. Also, some
media servers continually watch the file size while playing, so we adapt
predictions of the final filesize depending on the observed compression ratio.

The files are decoded with libsndfile, convolved, and re-encoded with
libsndfile. Libsndfile is very flexible in reading/writing all kinds
of audio files, but the support for rich header tags is limited. To not loose
information from the flac-headers when indexing Folve-served files with a
media server, Folve extracts and serves the headers from the original files
before continuing with the convolved audio stream.

Folve has been tested with some players and media servers (and
works around bugs in these). Still, this is the first version made public, so
expect rough edges. Please report observations with particular media servers
or send patches to h.zeller@acm.org.

This project is notably based on
Fuse: Filesystem in Userspace   http://fuse.sourceforge.net/
JConvolver Jack audio convolver http://apps.linuxaudio.org/apps/all/jconvolver
LibSndfile r/w audio files      http://www.mega-nerd.com/libsndfile/
Microhttpd webserver library    http://www.gnu.org/software/libmicrohttpd/

=== Compiling on Ubuntu (tested on 11.10 and 12.04) ===

  This requires the latest versions of libfuse and libzita convolver to compile.
  .. and a couple of other libs:

  $ sudo aptitude install libsndfile-dev libflac-dev libzita-convolver-dev \
                          libfuse-dev libboost-dev libmicrohttpd-dev
  $ make

(TODO: make install; debian package)

=== Run ===
 Since there is no 'make install' yet, let's run it from the local directory.

 Folve requires three parameters: the first is directory to filter
 configurations, the second the directory to the original flac files. The
 third is the mount-point, where the convolved flac files will show up:

  ./folve -c /filter/dir -f -p 17322 /path/to/original/files /mnt/mountpoint

Parameters:
  1) The flag '-c' with parameter /filter/dir needs to be a
     directory that has
     jconvolver filter-configuration files with the following naming scheme:

       filter-<samplerate>-<bits>-<channels>.conf

     So if you have flac files with 44.1khz, 16 bits and 2 channel stero,
     you need a filter configuration named:

     /filter/dir/filter-44100-16-2.conf

    (See README.CONFIG in the jconfolver project how these look like)

  2) The original directory that contains your collection of audio files.
     Right now, *.flac files are directly supported; others are attempted
     to read and write out as the same format (libsndfile)

  3) The mount point.

Available flags:
   -f           : Operate in foreground; mostly useful for debugging.
   -d           : Detailed debug log of fuse accesses
   -p <port>    : port to run an HTTP status server on
   -c <cfg-dir> : Configuration directory.
   -o <fuse-mount-option>  : other generic parameters passed to fuse.

Now you can access the fileystem under that mount point, e.g.
  mplayer /mnt/mountpoint/foo.flac

The fuse-convolve filesystem will determine the samplerate/bits/channels and
attempt to find the right filter in the filter directory. If there is a filter,
the output is filtered on-the-fly, otherwise the original file is returned.


If you gave folve the flag -p with an status port, it will serve current
status information on a http server; e.g. With ./folve ... -p 17322 have a look
on
  http://localhost:17322/
